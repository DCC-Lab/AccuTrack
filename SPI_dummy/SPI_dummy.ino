
#include <SPI.h>

const uint8_t MOTION_REG = 0x02;
const uint8_t DELTA_X_L = 0x03;
const uint8_t DELTA_X_H = 0x04;
const uint8_t DELTA_Y_L = 0x05;
const uint8_t DELTA_Y_H = 0x06;
const uint8_t OBSERVATION = 0x26;
const uint8_t CONFIG2 = 0x14;
const uint8_t CONFIG3 = 0x23;
const uint8_t CONFIG5 = 0x25;
const uint8_t SROM_ENABLE = 0x13;
const uint8_t SROM_LOAD_BURST = 0x62;
const uint8_t DATA_OUT_L = 0x2F;
const uint8_t DATA_OUT_U = 0x2E;
const uint8_t PWR_UP_RST = 0x3A;
const uint8_t PRODUCT_ID = 0X00;
const uint8_t INV_PRODUCT_ID = 0X3F;
const uint8_t MOTION_BURST = 0x50;
const uint8_t SQUAL_H = 0x07;
const uint8_t SQUAL_L = 0x08;
const uint8_t FRAME_CAPTURE = 0x12;
const uint8_t RAWDATA_BURST = 0x64;

const uint8_t READ = 0b01111111; // READ command with 0 on MSB
const uint8_t WRITE = 0b10000000; // WRITE command with 1 on MSB

bool motionBitHigh = false;
volatile bool dataAvailable = false;
bool firstFrame = true;

const int interruptPin = 5;
const int nrstPin = 2;
const int chipSelect = 10;

uint8_t dataBurstMotion[15]; // Array for burst reading registers
byte frameArray[1024];  // Array of the frame with values from 1 to 1024

long position_X = 0;
long position_Y = 0;
float dist_X = 0;
float dist_Y = 0;
uint16_t squal = 0;

const float cpi = 0.001402;

int squalCount = 0;
uint16_t squal_avg = 0;

void setup() {

  pinMode(chipSelect, OUTPUT); // Set chipSelect as an output
  digitalWrite(chipSelect, HIGH);

  pinMode(nrstPin, OUTPUT); // NRST pin
  digitalWrite(nrstPin, HIGH);
  
  pinMode(interruptPin, INPUT_PULLUP);

  Serial.begin(115200);
  
  SPI.begin();

  pwrUp();

  delay(35); // From navigation engine start to valid motion delay

  frameCaptureInit(); // Comment if you want to see displacement , uncomment if you want to take picture



  // attachInterrupt(digitalPinToInterrupt(interruptPin),interruptIN,FALLING);  // Interrupt pin for motion detection. Needs to be created after the pwrUp function
                                                                            // because motionPin is used for chip set-up purpose during pwrUp.

  // delay(100);

  // motionBurstSetUp();

}


void loop() {


  // getSerialInput();

//// To get picture of the sensor ////

  getFrame(); // Comment if you want to see displacement , uncomment if you want to take picture
  sendFrame(); // Comment if you want to see displacement , uncomment if you want to take picture
  delay(3000); // To not overfeed the python buffer



//// To have relative displacement ////
/*
  // position_X += readDeltaX();
  // position_Y += readDeltaY();

  // Serial.print(position_X);
  // Serial.print(" ");
  // Serial.println(position_Y);
*/

//// To have absolute displacement (calibration might be faulty) ////
/* 
  // dist_X = position_X * cpi;
  // dist_Y = position_Y * cpi;
  // long position_Total = sqrt(pow(position_X, 2) + pow(position_Y,2));
  // Serial.print(" ");
  // Serial.println(position_Total);
*/

//// To see the image quality factor ////
/*
  // squal = getSqual();
  // squal_avg = squal_avg + squal;
  // squalCount += 1;

  // if (squalCount >= 20){
  //   // Serial.print(squal);
  //   // Serial.print(", ");
  //   Serial.print(squal_avg/20);
  //   // Serial.print(" ");
  //   // Serial.print(squal);
  //   Serial.print(" ");
  //   Serial.print(760);
  //   Serial.print(" ");
  //   Serial.println(680);

  //   squalCount = 0;
  //   squal_avg = 0;
  // }
*/

//// Blabla i want to keep for later ////
/*
  // motionBurstRead(6); // Motion, Observation, DXL, DXH, DYL, DYH
    
  // int16_t delta_X = dataBurstMotion[3]*256 + dataBurstMotion[2];
  // int16_t delta_Y = dataBurstMotion[5]*256 + dataBurstMotion[4];
    
  // Serial.print(delta_X);
  // Serial.print(" ");
  // Serial.print(delta_Y);
  // Serial.print(" ");
  // Serial.print(1000);
  // Serial.print(" ");
  // Serial.println(-1000);








  // if (motionBitHigh){
    // uint8_t motion_read  = readRegister(MOTION_REG, 1);
    // delayMicroseconds(20);
    // writeRegister(OBSERVATION, 0x00);
    // delayMicroseconds(180);
    // uint8_t obs  = readRegister(OBSERVATION, 1);
    // delayMicroseconds(20);
    // uint8_t x_L  = readRegister(DELTA_X_L, 1);
    // delayMicroseconds(20);
    // uint8_t x_H  = readRegister(DELTA_X_H, 1);
    // delayMicroseconds(20);
    // uint8_t y_L  = readRegister(DELTA_Y_L, 1);
    // delayMicroseconds(20);
    // uint8_t y_H  = readRegister(DELTA_Y_H, 1);
    // delayMicroseconds(20);
    
    // Serial.print("");
    // Serial.println(x_L);
    // Serial.print("");
    // Serial.println(x_H);
    // Serial.print("");
    // Serial.println(y_L);
    // Serial.print("");
    // Serial.println(y_H);
    // }

  // Serial.print("motion bit: ");
  // Serial.println(readMotion(), BIN);

  // noInterrupts();

  // if (dataAvailable == true){
  //   if(readMotion()){
  //     uint16_t deltaX = readDeltaX();
  //     uint16_t deltaY = readDeltaY();
      

  //     // Print the accumulated motion
      // Serial.print("Delta X: ");
      // Serial.println(deltaX, DEC);
      // Serial.print("Delta Y: ");
      // Serial.println(deltaY, DEC);

  //   }
  //   dataAvailable = false;
  // }

  // interrupts();
  // if (motionBitHigh == true) {

  // Read the accumulated motion



  // bool moving = readMotion();

*/
}

void interruptIN() {
  dataAvailable = true;
}

bool readMotion() {
    
  // Read the motion register
  delayMicroseconds(20);
  uint8_t motion = readRegister(MOTION_REG, 1);
  return (motion & 0x80) != 0;
  
}

void readObservation(){
  delayMicroseconds(20);
}

int16_t readDeltaX() {
  delayMicroseconds(20);
  uint8_t deltaX_L = readRegister(DELTA_X_L, 1);
  delayMicroseconds(20);
  uint8_t deltaX_H = readRegister(DELTA_X_H, 1);

  int16_t deltaX = deltaX_H*256 + deltaX_L;
  
  return deltaX;
}

int16_t readDeltaY() {
  delayMicroseconds(20);
  uint8_t deltaY_L = readRegister(DELTA_Y_L, 1);
  delayMicroseconds(20);
  uint8_t deltaY_H = readRegister(DELTA_Y_H, 1);

  int16_t deltaY = deltaY_H*256 + deltaY_L;
  
  return deltaY;
}

uint16_t getSqual(){
  delayMicroseconds(20);
  uint8_t squal_H = readRegister(SQUAL_H, 1);
  delayMicroseconds(20);
  uint8_t squal_L = readRegister(SQUAL_L, 1);

  uint16_t squal_T = (squal_H << 8)|squal_L; // Tester avec le mask avant le signed et après le signed voir ce qui est sensé

  // return squal_T & 0xFFF; // squal & 0xFFF because the fisrt four bits of the Upper register are reserved.
  return squal_T;
}


void pwrUp(){ // Power up sequence, see datasheet
  
  Serial.print("Power up started.");
  Serial.println();
  
  delay(8); 
  digitalWrite(chipSelect, HIGH);
  
  delay(1);
  digitalWrite(chipSelect, LOW);

  writeRegister(PWR_UP_RST, 0x5A);
  delay(5);
  
  writeRegister(CONFIG3, 0x01);
  delay(1); 
  
  downloadSROM(); // Download SROM
  delay(50);

  writeRegister(CONFIG3, 0x01);
  delay(35);

  resetMotionReg(); // Read the Motion Reg, delta_X and delta_Y

  delay(50);

  Serial.print("Power up sequence completed.");
  Serial.println();

  checkID(); // To verify if chip ID and inverse ID are complementary (x&^x = 0x00)

}

void resetMotionReg(){

  /*
    Part of Power_reset from data sheet
  */

  delayMicroseconds(20);
  uint8_t a = readRegister(MOTION_REG, 1);
  delayMicroseconds(20);
  uint8_t b = readRegister(DELTA_X_L, 1);
  delayMicroseconds(20);
  uint8_t c = readRegister(DELTA_X_H, 1);
  delayMicroseconds(20);
  uint8_t d = readRegister(DELTA_Y_L, 1);
  delayMicroseconds(20);
  uint8_t e = readRegister(DELTA_Y_H, 1);
}

void checkID(){

  /*
    Function to confirm that ID & inverse_ID gives nul. This confirms the SPI link is functional.
  */

  uint8_t product_ID = readRegister(PRODUCT_ID, 1);
  delayMicroseconds(20);
  uint8_t inverse_ID = readRegister(INV_PRODUCT_ID, 1);
  uint8_t result_ID = (product_ID) & inverse_ID;
  Serial.print("PROD_id = ");
  Serial.println(product_ID, BIN);
  Serial.print("INV_PROD_id = ");
  Serial.println(inverse_ID, BIN);

  if (product_ID != 0x00){
    if(result_ID == 0x00){
      Serial.print("Serial communication link is functional. ");
      Serial.println();
    }
    else{
    Serial.print("Serial communication link is not functional. ");
    Serial.println();
    }
  }
  else{
    Serial.print("Serial communication link is not functional. ");
    Serial.println();
  }
}

void downloadSROM(){
  uint8_t PROGMEM SROM_BYTES[]  = {
  0x03,
  0x01,
  0x81,
  0x82,
  0x46,
  0x78,
  0x9e,
  0xbe,
  0xdf,
  0x1d,
  0x99,
  0xb0,
  0xe2,
  0x46,
  0x0e,
  0x7f,
  0x7c,
  0x7a,
  0x76,
  0x6e,
  0x5e,
  0x1f,
  0xbc,
  0xd4,
  0x34,
  0xea,
  0x56,
  0x2e,
  0xde,
  0x3e,
  0xdf,
  0x1d,
  0xb8,
  0xd3,
  0x24,
  0xab,
  0xb5,
  0xc9,
  0x10,
  0x83,
  0x65,
  0x28,
  0xb1,
  0xe0,
  0x23,
  0xa5,
  0xa9,
  0xb1,
  0xe0,
  0x23,
  0xc4,
  0xeb,
  0x54,
  0x2a,
  0xb7,
  0xcd,
  0x18,
  0x93,
  0x85,
  0x88,
  0x73,
  0x64,
  0x4a,
  0xf7,
  0x4d,
  0x18,
  0x93,
  0x80,
  0x88,
  0x92,
  0xa6,
  0xce,
  0x1e,
  0xbe,
  0xfe,
  0x5f,
  0x3c,
  0xfa,
  0x60,
  0x6e,
  0x5e,
  0x1f,
  0xbc,
  0xdb,
  0x15,
  0x89,
  0x71,
  0x60,
  0x42,
  0xe7,
  0x4c,
  0x1a,
  0xb6,
  0xee,
  0x3f,
  0xdd,
  0x19,
  0x91,
  0xa0,
  0xa3,
  0xa5,
  0xa9,
  0xd0,
  0x03,
  0x84,
  0x8a,
  0x96,
  0x8f,
  0x7d,
  0x59,
  0x30,
  0xc3,
  0xe7,
  0x4b,
  0xf3,
  0x64,
  0x4a,
  0xf7,
  0x6b,
  0x52,
  0x3f,
  0xe4,
  0x34,
  0xf0,
  0x56,
  0x1b,
  0x99,
  0x81,
  0xb0,
  0xd5,
  0x1a,
  0x8b,
  0x96,
  0x4d,
  0xf0,
  0xac,
  0xba,
  0x0f,
  0x6c,
  0x91,
  0x79,
  0x92,
  0x06,
  0x45,
  0x3e,
  0xc9,
  0x99,
  0xc3,
  0x88,
  0xf3,
  0x15,
  0x0a,
  0x2e,
  0x07,
  0xeb,
  0x54,
  0x7a,
  0xe3,
  0xda,
  0x36,
  0x74,
  0xd8,
  0xac,
  0xdb,
  0xc6,
  0xff,
  0x84,
  0xfb,
  0x62,
  0xa7,
  0xfd,
  0xf4,
  0x04,
  0x8a,
  0xc1,
  0x83,
  0x0d,
  0x0b,
  0x85,
  0xbd,
  0xed,
  0x4e,
  0x93,
  0x4e,
  0xc7,
  0x36,
  0x7e,
  0x94,
  0x7d,
  0x5f,
  0x0d,
  0x72,
  0x69,
  0xba,
  0x07,
  0xb7,
  0x7b,
  0x7f,
  0x52,
  0xcc,
  0x34,
  0x00,
  0xac,
  0x30,
  0x1a,
  0x45,
  0x7d,
  0xa2,
  0xc0,
  0xfa,
  0x62,
  0x8d,
  0xb6,
  0x04,
  0xa4,
  0x20,
  0xec,
  0x91,
  0x79,
  0x58,
  0x92,
  0x93,
  0x1f,
  0xdb,
  0x28,
  0xf8,
  0xdd,
  0x29,
  0x17,
  0xed,
  0x7e,
  0x42,
  0xe0,
  0x4f,
  0x31,
  0x2d,
  0x08,
  0x27,
  0x53,
  0x29,
  0x9d,
  0x6b,
  0x2a,
  0x9c,
  0xb0,
  0x89,
  0x5f,
  0xd3,
  0x4a,
  0xe0,
  0xcc,
  0xb1,
  0x88,
  0x47,
  0x56,
  0xb9,
  0x28,
  0xf2,
  0xa8,
  0x87,
  0x4e,
  0x68,
  0x4d,
  0xb1,
  0xa1,
  0x2f,
  0x82,
  0x24,
  0x9a,
  0x6a,
  0x9e,
  0x6d,
  0xe3,
  0x91,
  0x9b,
  0xf1,
  0xde,
  0xff,
  0x93,
  0x31,
  0xd4,
  0x11,
  0x2c,
  0x15,
  0x69,
  0xbf,
  0x83,
  0x24,
  0xbb,
  0xc1,
  0xf8,
  0xc3,
  0x55,
  0x8a,
  0xc9,
  0xf3,
  0x67,
  0xc9,
  0xa4,
  0xfe,
  0xd6,
  0x92,
  0x93,
  0x0e,
  0xc3,
  0x5f,
  0x1d,
  0xcf,
  0x00,
  0xa8,
  0x4a,
  0x95,
  0xfe,
  0x0d,
  0x6f,
  0xb3,
  0x75,
  0xab,
  0xa4,
  0xd2,
  0xdd,
  0xdb,
  0x63,
  0x9f,
  0xdd,
  0xf9,
  0xbe,
  0x64,
  0x4d,
  0xed,
  0x73,
  0x81,
  0x3c,
  0xac,
  0xdd,
  0xcc,
  0x52,
  0x22,
  0x1b,
  0x20,
  0xe4,
  0xbd,
  0xd7,
  0x49,
  0xae,
  0xcc,
  0x3c,
  0x0c,
  0xb7,
  0x09,
  0x6c,
  0x8e,
  0xb8,
  0x07,
  0x04,
  0x8e,
  0x5c,
  0xb1,
  0x06,
  0x39,
  0x5f,
  0x59,
  0x0e,
  0x6d,
  0x5f,
  0x93,
  0x79,
  0x95,
  0x7c,
  0x1f,
  0xda,
  0x85,
  0x4e,
  0x3b,
  0x2d,
  0x04,
  0x8d,
  0x1b,
  0x92,
  0xa2,
  0x4d,
  0xe2,
  0x41,
  0xbd,
  0x62,
  0x63,
  0x4d,
  0x24,
  0x86,
  0x46,
  0x73,
  0xc8,
  0xcc,
  0x6e,
  0x13,
  0x5a,
  0xd3,
  0x38,
  0x5e,
  0x24,
  0x87,
  0xe2,
  0x92,
  0x8a,
  0xce,
  0x47,
  0x40,
  0x23,
  0xc8,
  0x7e,
  0x80,
  0xb6,
  0x73,
  0xad,
  0xa5,
  0xb8,
  0xd4,
  0x9a,
  0xa6,
  0xfa,
  0x07,
  0xdb,
  0xff,
  0x2d,
  0x8e,
  0xa6,
  0x3b,
  0x37,
  0x8d,
  0x64,
  0x5c,
  0x95,
  0x30,
  0x76,
  0x33,
  0x16,
  0xa1,
  0x42,
  0xf6,
  0x34,
  0xfe,
  0x76,
  0x1e,
  0x1d,
  0xa6,
  0x8a,
  0x71,
  0x8e,
  0x2a,
  0xb2,
  0x3a,
  0x87,
  0xf0,
  0x48,
  0x8a,
  0xd6,
  0x64,
  0x26,
  0xc1,
  0x33,
  0xdf,
  0xc6,
  0xce,
  0x8c,
  0x23,
  0x33,
  0xb8,
  0x0e,
  0x16,
  0x21,
  0xcb,
  0x34,
  0x24,
  0x00,
  0x59,
  0xe5,
  0x21,
  0x85,
  0x20,
  0x83,
  0x4a,
  0x93,
  0x2e,
  0xcc,
  0xe3,
  0x12,
  0xac,
  0xf3,
  0x59,
  0x0e,
  0x96,
  0xaf,
  0xd0,
  0x47,
  0x8d,
  0xa9,
  0x6a,
  0x96,
  0xfc,
  0xe2,
  0x94,
  0x1f,
  0x40,
  0x8a,
  0x78,
  0x58,
  0xf3,
  0x8b,
  0xde,
  0xa5,
  0x39,
  0x97,
  0x5d,
  0x56,
  0xd4,
  0xaa,
  0xc4,
  0xb3,
  0x15,
  0x19,
  0x4c,
  0x92,
  0x48,
  0x19,
  0x71,
  0xae,
  0x14,
  0x10,
  0x77,
  0xa4,
  0x5c,
  0xd9,
  0xb4,
  0x71,
  0x60,
  0x50,
  0xdb,
  0xc6,
  0x79,
  0x6d,
  0x50,
  0xad,
  0xd3,
  0xe5,
  0xa7,
  0x66,
  0x34,
  0x8c,
  0xd0,
  0x80,
  0x43,
  0xe0,
  0xaf,
  0x90,
  0x0c,
  0x29,
  0xa0,
  0xc3,
  0xe4,
  0xc4,
  0x68,
  0xa8,
  0xa0,
  0xce,
  0x7a,
  0x95,
  0xe9,
  0x36,
  0x4d,
  0x9b,
  0x8e,
  0x8d,
  0x14,
  0x8e,
  0x1a,
  0x9a,
  0x3f,
  0x4b,
  0x4c,
  0xb9,
  0xd5,
  0xdc,
  0x2b,
  0x56,
  0x2b,
  0x43,
  0x74,
  0xa8,
  0xd0,
  0xfb,
  0x37,
  0x7b,
  0xe5,
  0xeb,
  0x54,
  0xf7,
  0x2f,
  0x6a,
  0x26,
  0x6d,
  0x56,
  0xce,
  0x6e,
  0xfd,
  0x56,
  0xcc,
  0x6a,
  0xf5,
  0x45,
  0x4b,
  0xd7,
  0xe9,
  0x20,
  0x40,
  0xd5,
  0x5d,
  0xc9,
  0xf3,
  0x14,
  0xe8,
  0x19,
  0xbd,
  0xf3,
  0x90,
  0xe1,
  0x72,
  0x32,
  0x6e,
  0xee,
  0xe9,
  0x6a,
  0xf5,
  0x63,
  0x1d,
  0xa7,
  0x93,
  0x23,
  0xfb,
  0x1a,
  0xf5,
  0xc0,
  0xf8,
  0x9d,
  0x16,
  0xde,
  0x7d,
  0xf0,
  0x9a,
  0x48,
  0xbf,
  0x6d,
  0xfa,
  0xfd,
  0xa7,
  0xc2,
  0xa8,
  0xa2,
  0x64,
  0xa1,
  0x5d,
  0xc6,
  0x82,
  0xd6,
  0xfb,
  0xbc,
  0xa2,
  0x64,
  0xd3,
  0xee,
  0xe5,
  0xb0,
  0xa2,
  0x28,
  0xd9,
  0xf1,
  0xae,
  0x80,
  0x21,
  0xcc,
  0x9b,
  0x3f,
  0x08,
  0x96,
  0xd7,
  0x6e,
  0x32,
  0x00,
  0xf2,
  0xa4,
  0xa1,
  0x49,
  0x53,
  0xb3,
  0x75,
  0xaa,
  0xbf,
  0x31,
  0x78,
  0x1b,
  0x53,
  0xc7,
  0x1a,
  0xd0,
  0x63,
  0x19,
  0xa8,
  0xa3,
  0xa8,
  0x25,
  0xf1,
  0xd0,
  0xc4,
  0x89,
  0xe3,
  0xde,
  0x33,
  0x3d,
  0x69,
  0xd3,
  0x58,
  0xb6,
  0xe4,
  0xbc,
  0x81,
  0x4f,
  0x51,
  0xb1,
  0xd7,
  0xed,
  0xb7,
  0x93,
  0x06,
  0xb6,
  0x76,
  0xfa,
  0x50,
  0x0c,
  0xcb,
  0xb6,
  0xb0,
  0xf1,
  0x34,
  0x26,
  0x9f,
  0xff,
  0x02,
  0x97,
  0xf9,
  0xbe,
  0x8a,
  0xed,
  0x39,
  0x87,
  0xf6,
  0x6d,
  0x41,
  0x40,
  0x56,
  0x43,
  0x73,
  0x3b,
  0x9c,
  0xc6,
  0x84,
  0x98,
  0x2a,
  0x60,
  0xca,
  0xae,
  0x44,
  0xf5,
  0x2c,
  0x1c,
  0xe5,
  0x1f,
  0xa6,
  0xee,
  0xb1,
  0xcd,
  0xf4,
  0xba,
  0xd8,
  0xe1,
  0x7d,
  0x03,
  0xf2,
  0xff,
  0x3f,
  0x05,
  0xb2,
  0xf1,
  0xef,
  0xe7,
  0x47,
  0xc2,
  0x85,
  0xbe,
  0x6a,
  0xc3,
  0x78,
  0xe3,
  0x0b,
  0x15,
  0xa0,
  0x53,
  0xd4,
  0xaf,
  0xf8,
  0x19,
  0x17,
  0x63,
  0xd1,
  0x1c,
  0x2b,
  0x71,
  0xa1,
  0xd3,
  0xec,
  0x3c,
  0xda,
  0xf8,
  0x3c,
  0x2f,
  0x6d,
  0x2b,
  0x34,
  0x06,
  0x4d,
  0x5c,
  0x49,
  0x93,
  0xea,
  0x81,
  0x60,
  0x04,
  0xff,
  0x58,
  0x90,
  0xca,
  0x2e,
  0xdf,
  0xba,
  0xca,
  0xd2,
  0x06,
  0x82,
  0x63,
  0xc4,
  0x26,
  0x2e,
  0x01,
  0xed,
  0xac,
  0x86,
  0x8f,
  0x92,
  0x3c,
  0x80,
  0x6d,
  0x56,
  0xd7,
  0xb9,
  0xaa,
  0x2a,
  0xbf,
  0xf3,
  0x2f,
  0xdd,
  0xd7,
  0x53,
  0x86,
  0x1b,
  0x92,
  0x3d,
  0xe8,
  0xc7,
  0xb5,
  0x1d,
  0x01,
  0x7c,
  0x13,
  0x4a,
  0x1d,
  0x79,
  0xbe,
  0x81,
  0x03,
  0x13,
  0x67,
  0xf6,
  0x9f,
  0x48,
  0xab,
  0x03,
  0xda,
  0xca,
  0x7f,
  0x73,
  0x4e,
  0x1f,
  0x53,
  0xb0,
  0xfa,
  0x8c,
  0xce,
  0x6a,
  0x78,
  0x03,
  0x81,
  0xfd,
  0xda,
  0x83,
  0x6a,
  0x78,
  0x08,
  0x94,
  0xdb,
  0x14,
  0x3e,
  0x3d,
  0x6e,
  0x95,
  0xa7,
  0x9d,
  0xfb,
  0xc0,
  0xe1,
  0x45,
  0xc0,
  0x13,
  0xb5,
  0x2b,
  0x21,
  0x21,
  0xd5,
  0x1f,
  0x30,
  0x92,
  0x04,
  0x1d,
  0x9f,
  0x79,
  0xb8,
  0x23,
  0x95,
  0x0a,
  0xe1,
  0xa5,
  0x3c,
  0x4d,
  0x94,
  0x5e,
  0xa6,
  0x39,
  0xac,
  0x07,
  0xe5,
  0x87,
  0xa6,
  0xee,
  0xd0,
  0x7c,
  0xb9,
  0x58,
  0xec,
  0x01,
  0x90,
  0x56,
  0xb6,
  0x1e,
  0xec,
  0x87,
  0xe5,
  0x87,
  0xa6,
  0xee,
  0xd0,
  0x7c,
  0xb9,
  0x5a,
  0xcd,
  0xc3,
  0x14,
  0x5e,
  0xa6,
  0x3f,
  0xac,
  0x26,
  0xc6,
  0xe0,
  0x68,
  0x53,
  0xea,
  0xe3,
  0xa3,
  0x14,
  0x8a,
  0x02,
  0x05,
  0xe1,
  0xb7,
  0xe3,
  0xfe,
  0xa9,
  0x2d,
  0x05,
  0x2b,
  0xfa,
  0x07,
  0x89,
  0xed,
  0xfa,
  0xfc,
  0x89,
  0xdf,
  0xa6,
  0x13,
  0xcd,
  0x73,
  0x54,
  0x2a,
  0x39,
  0x43,
  0xdb,
  0xb2,
  0xe9,
  0x5f,
  0xb9,
  0xd8,
  0x03,
  0xbc,
  0x79,
  0x26,
  0xca,
  0x86,
  0x6d,
  0x9f,
  0x29,
  0x0f,
  0xf1,
  0x67,
  0xb1,
  0x15,
  0xeb,
  0xc0,
  0xc2,
  0xa2,
  0xd1,
  0x4d,
  0xdd,
  0xb2,
  0x61,
  0x05,
  0xa1,
  0xc1,
  0x96,
  0x50,
  0x61,
  0xd6,
  0x0b,
  0x30,
  0x35,
  0xe4,
  0x8f,
  0x37,
  0x4a,
  0xb2,
  0x8f,
  0x1d,
  0x51,
  0x29,
  0x09,
  0xf1,
  0xa8,
  0x95,
  0x88,
  0x9c,
  0xe4,
  0xc9,
  0x88,
  0xff,
  0x95,
  0x7b,
  0x0f,
  0x51,
  0x2b,
  0x54,
  0x9e,
  0x9e,
  0x70,
  0xd6,
  0xe2,
  0x4f,
  0xd1,
  0x4c,
  0x1b,
  0x5b,
  0xa1,
  0x03,
  0x93,
  0xd7,
  0x1d,
  0x79,
  0x9f,
  0x29,
  0x09,
  0xf1,
  0x54,
  0x57,
  0xed,
  0xd6,
  0xc2,
  0xc6,
  0xd6,
  0x9c,
  0x6d,
  0x78,
  0x1c,
  0x18,
  0x29,
  0x1e,
  0xe1,
  0x3f,
  0xd5,
  0xad,
  0xec,
  0xe6,
  0xec,
  0xc1,
  0xff,
  0xf8,
  0x7a,
  0x86,
  0x6d,
  0x6d,
  0xfa,
  0xed,
  0x86,
  0xd0,
  0xb8,
  0x19,
  0xd4,
  0xc6,
  0x1a,
  0xab,
  0xc6,
  0x56,
  0xff,
  0xba,
  0xa3,
  0x1a,
  0xd9,
  0x38,
  0xd6,
  0x0e,
  0x71,
  0xad,
  0x08,
  0x67,
  0xd1,
  0xf4,
  0xbf,
  0x95,
  0xc1,
  0x34,
  0xc7,
  0x0a,
  0x42,
  0x28,
  0x07,
  0x79,
  0xcf,
  0xef,
  0x89,
  0xcc,
  0xdb,
  0x00,
  0xb1,
  0xfb,
  0x60,
  0x53,
  0xc0,
  0x88,
  0x80,
  0x6b,
  0x89,
  0x2f,
  0x69,
  0xdb,
  0xd5,
  0xb9,
  0x9e,
  0x73,
  0x28,
  0x46,
  0x82,
  0xe3,
  0x44,
  0xaa,
  0xe3,
  0xb1,
  0x41,
  0x1e,
  0xdb,
  0x92,
  0xdf,
  0xe8,
  0xd4,
  0x25,
  0x44,
  0x56,
  0xa3,
  0x0e,
  0x33,
  0x0f,
  0x57,
  0xe9,
  0xf8,
  0x66,
  0x26,
  0x2e,
  0xc3,
  0xac,
  0xaf,
  0x94,
  0x69,
  0x0b,
  0x4c,
  0x92,
  0x4f,
  0x6c,
  0x83,
  0xbe,
  0x53,
  0xcf,
  0xb6,
  0x0a,
  0x8c,
  0xe7,
  0x3b,
  0xbe,
  0xdb,
  0xa3,
  0x6e,
  0x55,
  0x45,
  0x23,
  0x69,
  0xcb,
  0x79,
  0xa3,
  0x54,
  0x3a,
  0x71,
  0xdd,
  0x52,
  0x0c,
  0xa0,
  0xf7,
  0x0a,
  0xeb,
  0x0f,
  0xb7,
  0x08,
  0x59,
  0x07,
  0x87,
  0xcd,
  0x3f,
  0x07,
  0x73,
  0x1d,
  0x39,
  0x67,
  0x0c,
  0x5e,
  0x07,
  0x2f,
  0x58,
  0x7f,
  0x8b,
  0xae,
  0x73,
  0xfe,
  0xb3,
  0x83,
  0x3a,
  0x21,
  0x49,
  0xbd,
  0x27,
  0x6f,
  0x6e,
  0xe0,
  0xc0,
  0x0e,
  0x8b,
  0x55,
  0xc3,
  0x27,
  0x74,
  0xc9,
  0xfc,
  0x9c,
  0xab,
  0x77,
  0x47,
  0x81,
  0x40,
  0xe0,
  0x20,
  0x11,
  0x49,
  0x20,
  0xa2,
  0xdc,
  0xea,
  0x0e,
  0x1c,
  0xb7,
  0x0a,
  0xc7,
  0xaf,
  0xb7,
  0x04,
  0xe8,
  0x05,
  0x1d,
  0xd8,
  0x64,
  0xbf,
  0xfa,
  0xdb,
  0x33,
  0x59,
  0x4a,
  0x3d,
  0x3b,
  0x94,
  0xe8,
  0x3b,
  0x39,
  0x8b,
  0x6c,
  0x98,
  0xfe,
  0xa3,
  0xa5,
  0x46,
  0x50,
  0x60,
  0x4e,
  0xea,
  0xee,
  0x35,
  0x49,
  0xff,
  0xa8,
  0x71,
  0x6c,
  0xca,
  0xce,
  0x08,
  0x71,
  0x7d,
  0x0d,
  0x95,
  0x20,
  0x9a,
  0x30,
  0x12,
  0x22,
  0x18,
  0xb1,
  0x59,
  0x15,
  0x9b,
  0x62,
  0x09,
  0x32,
  0x94,
  0x59,
  0x7b,
  0x5e,
  0xaf,
  0xaa,
  0xfc,
  0xcf,
  0x37,
  0x38,
  0x30,
  0xd2,
  0xe8,
  0x16,
  0x36,
  0x68,
  0x62,
  0xa0,
  0x9a,
  0xc1,
  0x02,
  0x75,
  0x3e,
  0x90,
  0xe0,
  0x51,
  0xd7,
  0xe2,
  0xd3,
  0x0e,
  0xee,
  0x28,
  0xf8,
  0xc7,
  0x27,
  0x18,
  0xf0,
  0x73,
  0xcb,
  0xac,
  0xb1,
  0x41,
  0xce,
  0xca,
  0xb5,
  0xf6,
  0xbb,
  0x6c,
  0x6d,
  0x9a,
  0x62,
  0xe5,
  0x37,
  0x5d,
  0xa1,
  0x8a,
  0x56,
  0xe0,
  0xe3,
  0x1c,
  0x0d,
  0x1d,
  0x42,
  0x70,
  0xaf,
  0x5a,
  0xe7,
  0x90,
  0xee,
  0xa5,
  0xe4,
  0xac,
  0x58,
  0x1f,
  0x69,
  0x8d,
  0xf1,
  0xea,
  0xc5,
  0x0c,
  0x09,
  0x75,
  0x71,
  0x44,
  0x85,
  0x88,
  0x9c,
  0x0c,
  0xc3,
  0xf2,
  0xbb,
  0x97,
  0x4a,
  0x84,
  0x15,
  0x40,
  0x02,
  0x39,
  0xdf,
  0x89,
  0x0a,
  0x3d,
  0xc8,
  0x38,
  0xa5,
  0x3c,
  0xc9,
  0xdf,
  0x71,
  0x03,
  0xe4,
  0x41,
  0x6c,
  0xba,
  0xe5,
  0x8b,
  0x87,
  0x8d,
  0x77,
  0xd8,
  0xd5,
  0x77,
  0x5e,
  0x8d,
  0x99,
  0x7e,
  0xca,
  0xed,
  0x3f,
  0x4b,
  0x7d,
  0x59,
  0xfe,
  0xeb,
  0xb7,
  0xbb,
  0x41,
  0x5e,
  0xff,
  0xb2,
  0x1b,
  0x5d,
  0x64,
  0xbe,
  0x8c,
  0x99,
  0x4c,
  0x98,
  0x7f,
  0x39,
  0x14,
  0xc0,
  0xd8,
  0x74,
  0xdd,
  0xa0,
  0xe2,
  0xa9,
  0x85,
  0x44,
  0x60,
  0x22,
  0x93,
  0x84,
  0x65,
  0xf7,
  0xce,
  0x6c,
  0x77,
  0x9c,
  0x5c,
  0xf3,
  0x31,
  0x0e,
  0xd3,
  0xd4,
  0x3c,
  0xda,
  0xf8,
  0x2c,
  0x58,
  0x1e,
  0x69,
  0x6f,
  0xf3,
  0x88,
  0x1a,
  0x15,
  0xa2,
  0x3e,
  0x4e,
  0xfc,
  0xfc,
  0xdc,
  0x8a,
  0x74,
  0xaf,
  0x98,
  0xae,
  0x5c,
  0x13,
  0x79,
  0x6f,
  0xf1,
  0x8c,
  0xf7,
  0x6d,
  0xef,
  0x29,
  0xd6,
  0xdf,
  0x78,
  0x14,
  0x36,
  0x84,
  0x81,
  0x9d,
  0x26,
  0x6d,
  0x32,
  0x3d,
  0x1c,
  0x2c,
  0xd4,
  0x3b,
  0x57,
  0x07,
  0x74,
  0x9e,
  0x48,
  0x1c,
  0xdb,
  0x84,
  0x68,
  0x94,
  0x2d,
  0x68,
  0xe3,
  0x4b,
  0xcb,
  0xa4,
  0x59,
  0x72,
  0x6b,
  0xc3,
  0xd0,
  0xfa,
  0xe7,
  0xce,
  0xf5,
  0x04,
  0x4a,
  0xf4,
  0xc8,
  0x41,
  0xa9,
  0xe0,
  0xa1,
  0x8b,
  0x4d,
  0xd3,
  0x63,
  0x76,
  0xd8,
  0x70,
  0x4f,
  0xe8,
  0x67,
  0xf4,
  0xc9,
  0xfc,
  0x9c,
  0xca,
  0xb5,
  0xe2,
  0x2a,
  0x16,
  0x6d,
  0x3a,
  0xc4,
  0xa3,
  0x15,
  0xb9,
  0x32,
  0xcf,
  0xe0,
  0x77,
  0x24,
  0xf3,
  0x21,
  0x88,
  0x4f,
  0x13,
  0x0d,
  0x7f,
  0x37,
  0x86,
  0x19,
  0x12,
  0xb4,
  0x52,
  0x22,
  0xb5,
  0x57,
  0x26,
  0xbd,
  0x18,
  0xe4,
  0x3f,
  0x1b,
  0x41,
  0x98,
  0x9d,
  0xf0,
  0x3b,
  0x70,
  0x11,
  0xfe,
  0x14,
  0x2e,
  0xd8,
  0x6a,
  0x0f,
  0xd8,
  0x60,
  0x3d,
  0x70,
  0xd1,
  0x62,
  0x4e,
  0xe2,
  0x82,
  0x7e,
  0x5d,
  0x09,
  0x91,
  0xd7,
  0xc8,
  0x4e,
  0x39,
  0x7c,
  0x1c,
  0x26,
  0x95,
  0x62,
  0xa4,
  0xaa,
  0x54,
  0x03,
  0x89,
  0x52,
  0x52,
  0x54,
  0xe9,
  0x29,
  0x6e,
  0xb2,
  0xa9,
  0x85,
  0x8d,
  0x1c,
  0x24,
  0x15,
  0xe0,
  0x7c,
  0x31,
  0xa8,
  0x54,
  0xa3,
  0x70,
  0x1b,
  0x73,
  0x7e,
  0x26,
  0x4d,
  0x8c,
  0x49,
  0xd3,
  0x1a,
  0xb0,
  0x18,
  0xd7,
  0xeb,
  0xcf,
  0x3c,
  0x15,
  0x3f,
  0x6b,
  0xbe,
  0x23,
  0x61,
  0x58,
  0xa1,
  0xb6,
  0xe5,
  0x04,
  0x21,
  0x43,
  0xb5,
  0xa0,
  0x62,
  0x62,
  0xee,
  0xaa,
  0x00,
  0xc3,
  0x26,
  0xb9,
  0x45,
  0xef,
  0x80,
  0x0b,
  0xa3,
  0x66,
  0x63,
  0x17,
  0x99,
  0x5f,
  0x45,
  0xaa,
  0xed,
  0xe7,
  0x1c,
  0xf9,
  0x6b,
  0xf9,
  0xe5,
  0xf6,
  0x83,
  0xf0,
  0x9b,
  0xd7,
  0xdb,
  0xee,
  0x5f,
  0xf2,
  0x28,
  0xd1,
  0x65,
  0x32,
  0xfe,
  0x27,
  0x36,
  0x8b,
  0xdc,
  0x1e,
  0x9e,
  0x70,
  0xd4,
  0x39,
  0x33,
  0x39,
  0x90,
  0x43,
  0x97,
  0x25,
  0x83,
  0x50,
  0x80,
  0xff,
  0x8f,
  0xfe,
  0x6c,
  0x8d,
  0x36,
  0x4d,
  0x1f,
  0x78,
  0x8a,
  0xe6,
  0xcd,
  0x51,
  0x7b,
  0xa5,
  0x68,
  0x77,
  0x1a,
  0x62,
  0x9e,
  0xef,
  0x9a,
  0x8e,
  0xf5,
  0xe8,
  0xb7,
  0x31,
  0x84,
  0x27,
  0xba,
  0xee,
  0x3d,
  0x6e,
  0xf7,
  0x40,
  0x08,
  0x16,
  0x39,
  0x18,
  0x12,
  0xfb,
  0x19,
  0x90,
  0x6c,
  0x0f,
  0x44,
  0x69,
  0x60,
  0x86,
  0x6f,
  0xb3,
  0xcf,
  0x73,
  0x3f,
  0x7d,
  0xac,
  0x8c,
  0x41,
  0x84,
  0xe9,
  0x03,
  0x85,
  0x86,
  0x3a,
  0xee,
  0x3d,
  0x08,
  0x84,
  0x8b,
  0x7b,
  0xe3,
  0xea,
  0x6f,
  0xc4,
  0x93,
  0x93,
  0xa9,
  0xf6,
  0xa1,
  0x6a,
  0x5b,
  0xa0,
  0xb0,
  0x44,
  0x9d,
  0x41,
  0x63,
  0xca,
  0x0d,
  0x8a,
  0x22,
  0x64,
  0x18,
  0x5d,
  0xc8,
  0x92,
  0x57,
  0x9c,
  0x18,
  0xd5,
  0x4c,
  0xfa,
  0xd7,
  0xc6,
  0x66,
  0x96,
  0xec,
  0xed,
  0x82,
  0xa6,
  0x40,
  0x4c,
  0xf8,
  0x66,
  0x82,
  0x80,
  0xf8,
  0xd0,
  0x45,
  0x6c,
  0xaa,
  0x72,
  0xab,
  0xc1,
  0xce,
  0x51,
  0xe2,
  0x15,
  0x88,
  0x9c,
  0x66,
  0x81,
  0xfe,
  0xac,
  0x65,
  0xc6,
  0xc1,
  0x7e,
  0xa4,
  0x5b,
  0xb3,
  0x6d,
  0x95,
  0x74,
  0xcd,
  0xb2,
  0xef,
  0xc8,
  0xb6,
  0x42,
  0xe2,
  0xca,
  0xb3,
  0x5a,
  0xf3,
  0x0c,
  0x96,
  0xf8,
  0xd3,
  0x06,
  0x3a,
  0x3b,
  0x7c,
  0x1d,
  0xa7,
  0x57,
  0xb1,
  0xee,
  0x59,
  0x4f,
  0x05,
  0x55,
  0xa3,
  0xa8,
  0x8f,
  0x62,
  0x1b,
  0x30,
  0xb1,
  0x9d,
  0x44,
  0xc7,
  0xc4,
  0x62,
  0x32,
  0x29,
  0x58,
  0x3a,
  0x21,
  0x8d,
  0x9e,
  0xca,
  0x43,
  0x0b,
  0x0c,
  0x6c,
  0x73,
  0x2a,
  0xc4,
  0xe1,
  0xc6,
  0x31,
  0xcb,
  0xd4,
  0xc0,
  0x68,
  0x32,
  0x41,
  0xf9,
  0xb3,
  0xa1,
  0x22,
  0xc3,
  0x8d,
  0x8a,
  0x48,
  0xbd,
  0x16,
  0xf1,
  0xd2,
  0x1b,
  0xab,
  0x0f,
  0xdd,
  0xb9,
  0x8f,
  0x24,
  0x0a,
  0x34,
  0x77,
  0xd2,
  0x25,
  0x8d,
  0xe5,
  0x95,
  0xaa,
  0x91,
  0xa2,
  0x67,
  0x08,
  0x6b,
  0x83,
  0xa0,
  0xa8,
  0x96,
  0x22,
  0x80,
  0x7f,
  0xeb,
  0xf2,
  0x08,
  0xf5,
  0x81,
  0xa1,
  0xb1,
  0x56,
  0x6f,
  0x5f,
  0x34,
  0x7e,
  0x1d,
  0xac,
  0x0d,
  0xdb,
  0x7e,
  0xa4,
  0x75,
  0xd7,
  0x16,
  0xbf,
  0xbc,
  0xc1,
  0xf3,
  0x26,
  0xd7,
  0xde,
  0xf2,
  0x5f,
  0x2c,
  0xf5,
  0x56,
  0xd6,
  0x0f,
  0x63,
  0x9e,
  0x9d,
  0x84,
  0x51,
  0xec,
  0x46,
  0xf7,
  0xbe,
  0x6b,
  0xfa,
  0x51,
  0x47,
  0x8f,
  0x00,
  0x55,
  0xf1,
  0x00,
  0x72,
  0xa0,
  0x93,
  0xda,
  0xfd,
  0x0d,
  0xe7,
  0xc5,
  0xbd,
  0x65,
  0xc7,
  0xb9,
  0x6c,
  0xd7,
  0x50,
  0x61,
  0x3d,
  0x1b,
  0xb1,
  0xdf,
  0xe6,
  0xee,
  0x7b,
  0x2b,
  0x87,
  0xbc,
  0xae,
  0xad,
  0x36,
  0x9e,
  0xbf,
  0x3a,
  0xc5,
  0xa2,
  0x45,
  0x7c,
  0xbc,
  0x7a,
  0xdd,
  0x84,
  0xb7,
  0x80,
  0xa3,
  0x63,
  0x1a,
  0xe8,
  0x3d,
  0xea,
  0x16,
  0xac,
  0x7b,
  0x20,
  0xdb,
  0xa3,
  0x70,
  0x49,
  0x54,
  0x47,
  0x5a,
  0xeb,
  0x83,
  0xd3,
  0x8b,
  0xd2,
  0xae,
  0x8e,
  0xae,
  0x09,
  0xa0,
  0xa1,
  0xa9,
  0x65,
  0xfb,
  0x21,
  0x76,
  0x1c,
  0x1d,
  0xaf,
  0x57,
  0xd0,
  0xc0,
  0xc6,
  0x2b,
  0xc2,
  0xf7,
  0xf9,
  0x9e,
  0x0a,
  0xfa,
  0x1b,
  0x31,
  0x56,
  0x0a,
  0x3e,
  0x82,
  0x78,
  0xc6,
  0x60,
  0xeb,
  0xe1,
  0x3d,
  0x25,
  0x9d,
  0xe9,
  0x47,
  0x98,
  0xcc,
  0xe0,
  0xf6,
  0xbe,
  0xab,
  0x40,
  0x7d,
  0x80,
  0x57,
  0x1e,
  0xcc,
  0x66,
  0xec,
  0x46,
  0x3d,
  0x11,
  0x46,
  0xcb,
  0xa2,
  0xf4,
  0x3d,
  0x6f,
  0x8e,
  0x8b,
  0xc3,
  0x8b,
  0xb9,
  0x67,
  0x42,
  0x48,
  0x45,
  0x81,
  0xc0,
  0x55,
  0xda,
  0x23,
  0x72,
  0x97,
  0x53,
  0xc5,
  0x0f,
  0x85,
  0x24,
  0x70,
  0xd6,
  0x10,
  0x8f,
  0xca,
  0x9c,
  0xe0,
  0x53,
  0x8f,
  0xc5,
  0xf5,
  0xef,
  0x9a,
  0x40,
  0xeb,
  0xfe,
  0xfb,
  0x69,
  0x0c,
  0xf6,
  0x49,
  0x64,
  0x71,
  0x31,
  0x09,
  0x3a,
  0xc0,
  0xca,
  0x7b,
  0x7e,
  0xf2,
  0x3d,
  0x9e,
  0x5d,
  0x1d,
  0xf5,
  0x15,
  0x91,
  0xd8,
  0xbd,
  0x0e,
  0xc6,
  0x31,
  0xe1,
  0xd7,
  0x34,
  0x15,
  0x48,
  0x05,
  0xb1,
  0xfe,
  0x7f,
  0x8a,
  0xaf,
  0xc2,
  0xe6,
  0xd9,
  0x28,
  0xcc,
  0xdb,
  0xc2,
  0x3f,
  0xe2,
  0xa6,
  0x38,
  0xcb,
  0x2b,
  0x34,
  0x1c,
  0xa2,
  0xd8,
  0xb3,
  0x12,
  0xbe,
  0xe0,
  0x83,
  0x72,
  0x5f,
  0x22,
  0x26,
  0x59,
  0x09,
  0x8e,
  0x7e,
  0x88,
  0xab,
  0xca,
  0xd7,
  0xda,
  0x0f,
  0xa3,
  0x24,
  0x3c,
  0xc3,
  0x1a,
  0xbb,
  0x4b,
  0x6b,
  0x1a,
  0x8b,
  0x14,
  0x55,
  0xc4,
  0xf6,
  0xaf,
  0x4c,
  0x1c,
  0xce,
  0x11,
  0x38,
  0xbb,
  0x16,
  0x3b,
  0x90,
  0x41,
  0x2a,
  0xda,
  0x2c,
  0x42,
  0x55,
  0x3c,
  0x9f,
  0xa9,
  0x3e,
  0x6b,
  0x19,
  0x9f,
  0x13,
  0xd1,
  0xe5,
  0xbe,
  0x10,
  0xef,
  0xf2,
  0x8e,
  0xbe,
  0x30,
  0x3c,
  0xe5,
  0x0a,
  0x63,
  0x9c,
  0xb4,
  0xe1,
  0x60,
  0xad,
  0x8d,
  0x62,
  0x23,
  0xa7,
  0xbe,
  0xbf,
  0x13,
  0x31,
  0xf8,
  0x30,
  0x12,
  0xb0,
  0xa3,
  0x4a,
  0xa0,
  0x6c,
  0x63,
  0x3d,
  0x21,
  0x37,
  0xc3,
  0xb1,
  0x23,
  0x9b,
  0x03,
  0x10,
  0xe4,
  0xa1,
  0x7b,
  0xe1,
  0x7b,
  0xd9,
  0x1f,
  0x72,
  0x6a,
  0x4c,
  0xa8,
  0x56,
  0xf6,
  0xad,
  0x12,
  0x0b,
  0x6a,
  0xd1,
  0xea,
  0xcb,
  0xf8,
  0xae,
  0x53,
  0x0f,
  0x50,
  0x0e,
  0x8d,
  0xc2,
  0xa6,
  0x48,
  0x66,
  0xc1,
  0x18,
  0x3a,
  0x7c,
  0xa9,
  0x1e,
  0x6a,
  0xd5,
  0x90,
  0x78,
  0x6c,
  0x94,
  0x4f,
  0xe2,
  0x5f,
  0x5a,
  0xa2,
  0xfc,
  0x50,
  0x39,
  0xa6,
  0xa8,
  0x46,
  0xa4,
  0xc0,
  0xe6,
  0x7c,
  0xc1,
  0x80,
  0x62,
  0xf2,
  0xa7,
  0xd8,
  0xc7,
  0x2d,
  0xcb,
  0x29,
  0x4a,
  0xad,
  0x05,
  0x00,
  0x40,
  0x13,
  0x65,
  0xc6,
  0xdb,
  0xad,
  0xb9,
  0x75,
  0x37,
  0xad,
  0x56,
  0xb4,
  0xc0,
  0x6f,
  0xd4,
  0x69,
  0xc9,
  0xca,
  0xe3,
  0x3a,
  0x09,
  0x05,
  0x89,
  0x65,
  0xdc,
  0x1b,
  0x00,
  0xdd,
  0xc0,
  0x82,
  0xe2,
  0x49,
  0xf1,
  0xae,
  0x8b,
  0x7b,
  0x3b,
  0xba,
  0x7d,
  0x58,
  0xfc,
  0x70,
  0xfc,
  0xc5,
  0x67,
  0x40,
  0xb6,
  0x7d,
  0x1e,
  0xfe,
  0x1f,
  0xca,
  0xbc,
  0x99,
  0x39,
  0x90,
  0x85,
  0xe1,
  0xfd,
  0x90,
  0x60,
  0xae,
  0x76,
  0xe8,
  0x79,
  0x68,
  0xd2,
  0xfa,
  0x80,
  0xda,
  0xb5,
  0x39,
  0xe4,
  0xbc,
  0xe8,
  0x26,
  0x41,
  0x58,
  0xb3,
  0x47,
  0x37,
  0x32,
  0x59,
  0xe8,
  0xde,
  0x88,
  0x4b,
  0xba,
  0x42,
  0x39,
  0x32,
  0x54,
  0xf5,
  0xa9,
  0x20,
  0x1a,
  0xfe,
  0xc0,
  0xdb,
  0x9e,
  0x02,
  0x58,
  0x74,
  0xf1,
  0xbf,
  0x39,
  0x9c,
  0x21,
  0x2b,
  0x08,
  0xf9,
  0xe9,
  0x94,
  0x6b,
  0xbb,
  0x63,
  0x3a,
  0x0c,
  0xc2,
  0x80,
  0x43,
  0x7b,
  0x8c,
  0xa3,
  0x62,
  0xe4,
  0x17,
  0x73,
  0x7c,
  0x1f,
  0x39,
  0x8d,
  0x85,
  0xb1,
  0x65,
  0xe3,
  0x7f,
  0xc3,
  0x9a,
  0x6e,
  0xeb,
  0xd2,
  0xde,
  0x69,
  0xf5,
  0xb6,
  0x34,
  0x28,
  0x6c,
  0xe2,
  0xc6,
  0x37,
  0x5d,
  0x97,
  0x54,
  0x98,
  0xfe,
  0xa0,
  0x5c,
  0x70,
  0x9c,
  0x06,
  0xd7,
  0x76,
  0xd1,
  0x62,
  0x22,
  0x29,
  0x08,
  0x8b,
  0x09,
  0x67,
  0x75,
  0x51,
  0x1f,
  0xbb,
  0x5f,
  0x05,
  0x97,
  0x1c,
  0x6c,
  0x82,
  0xb9,
  0x43,
  0x6c,
  0xad,
  0xe1,
  0x78,
  0xce,
  0xc8,
  0x2b,
  0xed,
  0xa7,
  0x87,
  0x7f,
  0x64,
  0x74,
  0xda,
  0x01,
  0xd8,
  0x6c,
  0x81,
  0x57,
  0x52,
  0x1d,
  0x07,
  0x12,
  0x7e,
  0xc3,
  0xb3,
  0x1c,
  0x04,
  0x1e,
  0x41,
  0xb3,
  0x57,
  0xf3,
  0xb5,
  0x59,
  0xc9,
  0xa9,
  0x4e,
  0xc7,
  0xb6,
  0x32,
  0x38,
  0x45,
  0x92,
  0x58,
  0x67,
  0x21,
  0x9b,
  0x9f,
  0x41,
  0x8a,
  0x2e,
  0xeb,
  0x54,
  0xc5,
  0x56,
  0x6c,
  0x44,
  0xfb,
  0xc1,
  0x86,
  0x65,
  0xf3,
  0x10,
  0x88,
  0xe5,
  0xc0,
  0x78,
  0xb2,
  0xa1,
  0xfd,
  0x50,
  0x53,
  0x0d,
  0xeb,
  0x7a,
  0x3a,
  0x4c,
  0x9f,
  0x55,
  0x5d,
  0x12,
  0xc3,
  0xdf,
  0xf9,
  0x89,
  0xc5,
  0x03,
  0x9f,
  0x7a,
  0x8a,
  0xf7,
  0x39,
  0xb1,
  0x2e,
  0xf5,
  0x7b,
  0xf6,
  0x0f,
  0x2e,
  0xa1,
  0xbb,
  0x25,
  0x34,
  0x8d,
  0x51,
  0x7e,
  0x54,
  0xb8,
  0x37,
  0xe7,
  0xde,
  0xa5,
  0x6c,
  0xb2,
  0xf2,
  0x4c,
  0xfb,
  0x56,
  0x5d,
  0x12,
  0x16,
  0x69,
  0x43,
  0x86,
  0x0f,
  0x4f,
  0x67,
  0x16,
  0x7f,
  0xa1,
  0x47,
  0xc6,
  0x73,
  0xaf,
  0x28,
  0xda,
  0xb6,
  0x75,
  0xcc,
  0xe2,
  0x72,
  0xad,
  0x1b,
  0x85,
  0xa2,
  0x52,
  0xcd,
  0x45,
  0x7d,
  0x94,
  0x99,
  0x9b,
  0x23,
  0x11,
  0x71,
  0x7c,
  0xb4,
  0xb4,
  0xc5,
  0x16,
  0x81,
  0x0b,
  0xf7,
  0x65,
  0xbe,
  0xe2,
  0x69,
  0x4e,
  0x31,
  0x9f,
  0xf2,
  0x03,
  0x5e,
  0xc3,
  0x0a,
  0x88,
  0xb8,
  0x59,
  0x51,
  0xdb,
  0xb4,
  0x92,
  0x5a,
  0x5f,
  0xbe,
  0xaf,
  0xfc,
  0x95,
  0xd7,
  0x8f,
  0x63,
  0x94,
  0x4a,
  0xd3,
  0xf3,
  0xab,
  0x56,
  0x3f,
  0x53,
  0x1b,
  0xfe,
  0x08,
  0x66,
  0xbe,
  0xc3,
  0x0a,
  0xe9,
  0x7f,
  0x83,
  0x8a,
  0xfc,
  0xf8,
  0x7b,
  0x82,
  0xbb,
  0x3a,
  0x89,
  0x9e,
  0xe0,
  0x6d,
  0x5c,
  0xc1,
  0x1c,
  0xf4,
  0x41,
  0xe1,
  0x35,
  0x23,
  0x2e,
  0xdc,
  0xc1,
  0xe1,
  0x38,
  0x0e,
  0x16,
  0x4d,
  0x28,
  0xf2,
  0xa8,
  0xf9,
  0x43,
  0x87,
  0xf8,
  0x27,
  0xfe,
  0x56,
  0xd1,
  0xa6,
  0xba,
  0x18,
  0x0b,
  0x43,
  0x94,
  0xc2,
  0xc8,
  0xd3,
  0x38,
  0xd2,
  0x22,
  0x64,
  0xd3,
  0x1a,
  0xb7,
  0x8a,
  0x96,
  0x3a,
  0x2f,
  0x84,
  0xe1,
  0xa1,
  0x2f,
  0x08,
  0x30,
  0x7b,
  0xae,
  0xab,
  0xb2,
  0xe6,
  0x40,
  0x26,
  0x77,
  0xde,
  0x67,
  0x23,
  0xaa,
  0x72,
  0x8f,
  0x0d,
  0x23,
  0x3c,
  0x9b,
  0x7c,
  0x1c,
  0x9a,
  0x59,
  0x8b,
  0x95,
  0x9d,
  0x09,
  0x32,
  0x5e,
  0x05,
  0xbd,
  0x38,
  0xf4,
  0xa9,
  0x4a,
  0xca,
  0xf3,
  0xee,
  0xaa,
  0x62,
  0x47,
  0x1b,
  0x66,
  0x4e,
  0xf2,
  0x9e,
  0xfe,
  0x4a,
  0x5a,
  0x36,
  0x20,
  0x7d,
  0xdb,
  0x15,
  0x44,
  0x3f,
  0x24,
  0x0d,
  0x3e,
  0xcb,
  0xec,
  0xac,
  0x59,
  0x06,
  0x0a,
  0x73,
  0xed,
  0xcb,
  0x8c,
  0xc2,
  0xf2,
  0x3a,
  0x35,
  0x86,
  0x09,
  0x29,
  0x9a,
  0xc7,
  0x13,
  0x31,
  0x23,
  0x92,
  0x44,
  0xf3,
  0x13,
  0x07,
  0x39,
  0x53,
  0x26,
  0x85,
  0xdc,
  0xe2,
  0xa0,
  0x64,
  0x7f,
  0x44,
  0xec,
  0xe0,
  0x64,
  0xc8,
  0xdc,
  0xa9,
  0x04,
  0x52,
  0xe1,
  0xe6,
  0x9a,
  0x0e,
  0x59,
  0xde,
  0x11,
  0xe2,
  0x67,
  0xe2,
  0x92,
  0x1f,
  0x1a,
  0x10,
  0xb6,
  0x37,
  0x0a,
  0x55,
  0x1f,
  0xfe,
  0x70,
  0x92,
  0xb2,
  0xdf,
  0xa9,
  0x52,
  0x29,
  0x22,
  0xf3,
  0xbd,
  0xff,
  0xc9,
  0xea,
  0xf5,
  0x6c,
  0xdf,
  0xa5,
  0xa3,
  0x04,
  0x44,
  0xde,
  0x9d,
  0xbc,
  0x3a,
  0x4f,
  0x0a,
  0xb3,
  0xbc,
  0x38,
  0xd6,
  0xf9,
  0xe1,
  0xc2,
  0x04,
  0x72,
  0x25,
  0x1b,
  0x51,
  0xca,
  0xf5,
  0xbc,
  0x39,
  0x4a,
  0xe9,
  0xc4,
  0xdd,
  0x36,
  0x76,
  0xe4,
  0x8a,
  0x79,
  0x85,
  0x0b,
  0x0f,
  0x42,
  0x83,
  0x3d,
  0x6c,
  0x1d,
  0x85,
  0xc8,
  0x90,
  0x27,
  0x41,
  0x2d,
  0x15,
  0x4c,
  0x97,
  0xb6,
  0x0d,
  0x3a,
  0x5a,
  0x1e,
  0xbc,
  0x40,
  0x06,
  0x87,
  0x18,
  0x37,
  0x05,
  0x57,
  0x43,
  0xcc,
  0xc8,
  0x27,
  0x65,
  0x01,
  0xe2,
  0xef,
  0x71,
  0x08,
  0xbb,
  0xf7,
  0x1a,
  0x5f,
  0x1b,
  0xa9,
  0x79,
  0x0d,
  0xf3,
  0x8d,
  0xc9,
  0x80,
  0x4a,
  0xa1,
  0x3f,
  0x15,
  0xe3,
  0xc1,
  0x29,
  0xf1,
  0xb3,
  0x2c,
  0xfe,
  0xc6,
  0x27,
  0xb6,
  0x09,
  0x58,
  0x4d,
  0x46,
  0x8c,
  0x4c,
  0xf8,
  0x6c,
  0xb4,
  0x28,
  0xe6,
  0x8b,
  0xae,
  0x1b,
  0x16,
  0x1b,
  0x14,
  0x9f,
  0x46,
  0x8d,
  0xec,
  0xd9,
  0x00,
  0x53,
  0x87,
  0xb9,
  0xf7,
  0x47,
  0xab,
  0x56,
  0x1c,
  0x52,
  0x21,
  0x1c,
  0x18,
  0x24,
  0x4f,
  0x3d,
  0x2a,
  0x55,
  0x9e,
  0xf9,
  0x6c,
  0xf2,
  0xa4,
  0x86,
  0x58,
  0x25,
  0x76,
  0xac,
  0xec,
  0xba,
  0xc5,
  0xbc,
  0x59,
  0x18,
  0x4f,
  0xf0,
  0xc9,
  0x92,
  0x8f,
  0x42,
  0xef,
  0xbd,
  0x5b,
  0x3f,
  0x24,
  0xc9,
  0x67,
  0xef,
  0x77,
  0xf7,
  0xf5,
  0xe2,
  0xa7,
  0x02,
  0x52,
  0x65,
  0xd3,
  0x1b,
  0x71,
  0xb8,
  0x66,
  0x09,
  0x6d,
  0x18,
  0x11,
  0x05,
  0x0f,
  0x86,
  0x63,
  0xd4,
  0x6a,
  0x4c,
  0xf9,
  0xf3,
  0xe9,
  0x59,
  0x32,
  0x5c,
  0x7e,
  0x56,
  0x5b,
  0xb1,
  0x08,
  0xdd,
  0x33,
  0x0c,
  0xd8,
  0x23,
  0x6c,
  0x97,
  0xe1,
  0xe8,
  0x94,
  0x10,
  0x4a,
  0xed,
  0x98,
  0x7b,
  0x88,
  0x3d,
  0x10,
  0x9e,
  0xb2,
  0x2f,
  0xca,
  0x0c,
  0xb2,
  0xed,
  0x78,
  0x9a,
  0x9b,
  0x9a,
  0x5e,
  0x61,
  0xa9,
  0x19,
  0xef,
  0xb5,
  0x21,
  0xa0,
  0xd7,
  0xe5,
  0x0c,
  0x74,
  0xa8,
  0xe5,
  0xaa,
  0x56,
  0x3a,
  0x34,
  0xde,
  0xbf,
  0x64,
  0x7d,
  0xe9,
  0xd2,
  0x0c,
  0x43,
  0x3a,
  0x48,
  0xd5,
  0x36,
  0x80,
  0x00,
  0xb6,
  0x6a,
  0xb9,
  0x70,
  0x0c,
  0x39,
  0xe6,
  0xcc,
  0xe4,
  0xa6,
  0x6c,
  0xb3,
  0x7c,
  0x51,
  0xc7,
  0xae,
  0x2b,
  0x74,
  0x2d,
  0x65,
  0xcb,
  0x60,
  0xc1,
  0x61,
  0x12,
  0x05,
  0x5c,
  0xbd,
  0x85,
  0x81,
  0x02,
  0x55,
  0xc4,
  0xd2,
  0x30,
  0x73,
  0xa6,
  0xe4,
  0x13,
  0x9a,
  0x88,
  0x34,
  0xd5,
  0x46,
  0x8c,
  0x49,
  0x98,
  0x7c,
  0xdb,
  0x3b,
  0x36,
  0xdb,
  0xb2,
  0x39,
  0x1c,
  0xf9,
  0xfa,
  0x9a,
  0x94,
  0x03,
  0xcb,
  0xf7,
  0xb8,
  0x50,
  0xb4,
  0x4e,
  0xc9,
  0xec,
  0xf8,
  0xe5,
  0xee,
  0x0e,
  0x6c,
  0xd8,
  0x1f,
  0x4b,
  0x38,
  0x3a,
  0x55,
  0x3f,
  0x1c,
  0x9d,
  0x66,
  0xed,
  0x72,
  0xfa,
  0xcf,
  0x2b,
  0xf5,
  0x56,
  0x71,
  0xe7,
  0x73,
  0x0a,
  0x15,
  0x00,
  0x99,
  0x7e,
  0xd0,
  0x33,
  0x27,
  0x25,
  0x30,
  0x1c,
  0x36,
  0x7f,
  0xde,
  0xb5,
  0x37,
  0x22,
  0x68,
  0x22,
  0x45,
  0x82,
  0x9b,
  0x4a,
  0x9a,
  0x15,
  0x5d,
  0x9b,
  0xbe,
  0x60,
  0x1a,
  0xa0,
  0x00,
  0x37,
  0x4f,
  0xf9,
  0xb5,
  0xd7,
  0xb2,
  0x16,
  0x5e,
  0x9d,
  0xbb,
  0x1e,
  0x7b,
  0xe2,
  0x69,
  0x20,
  0x40,
  0x00,
  0x8b,
  0x01,
  0x17,
  0xc3,
  0x04,
  0x3a,
  0xf5,
  0xee,
  0x19,
  0x00,
  0x58,
  0x75,
  0xaa,
  0xd4,
  0x77,
  0x6b,
  0xd9,
  0x12,
  0xb5,
  0x4e,
  0x72,
  0x16,
  0x0d,
  0x7c,
  0xbd,
  0x48,
  0xd6,
  0xcb,
  0xbf,
  0x24,
  0x8b,
  0x92,
  0x1b,
  0x17,
  0xa9,
  0x57,
  0xf8,
  0xaa,
  0x87,
  0x0e,
  0x7a,
  0x90,
  0x02,
  0x25,
  0x2d,
  0x2e,
  0xc5,
  0x8a,
  0x94,
  0x42,
  0xb6,
  0x0c,
  0xdc,
  0xbd,
  0x48,
  0xf0,
  0xa6,
  0xd9,
  0x0a,
  0x14,
  0x8f,
  0x78,
  0xe3,
  0x8b,
  0xf9,
  0xb2,
  0xc4,
  0x01,
  0x05,
  0x5e,
  0x30,
  0x92,
  0x05,
  0x6b,
  0xbc,
  0x2f,
  0x4b,
  0x1a,
  0xc6,
  0x8c,
  0x98,
  0x5a,
  0x08,
  0xcd,
  0xdf,
  0x03,
  0xb5,
  0x54,
  0xc9,
  0xf5,
  0x7f,
  0x58,
  0xd9,
  0x78,
  0xc3,
  0xf2,
  0x2e,
  0x7e,
  0xbb,
  0x63,
  0xf9,
  0xe5,
  0xe7,
  0xfa,
  0x0b,
  0x69,
  0x0e,
  0x49,
  0xad,
  0x2a,
  0xb7,
  0x7b,
  0x09,
  0x49,
  0x06,
  0x38,
  0x8f,
  0x3f,
  0x19,
  0x86,
  0x95,
  0xeb,
  0xac,
  0x21,
  0xa5,
  0x41,
  0xf2,
  0xf3,
  0xa5,
  0xbd,
  0x2c,
  0xfb,
  0x97,
  0xed,
  0x5c,
  0x6f,
  0x7d,
  0xc9,
  0x3e,
  0xcf,
  0x1d,
  0x0c,
  0xe9,
  0xf3,
  0x59,
  0x00,
  0xe2,
  0x20,
  0x81,
  0x23,
  0x24,
  0xac,
  0x4f,
  0x1d,
  0x1a,
  0xe9,
  0xf3,
  0x5f,
  0x84,
  0x66,
  0x21,
  0xc1,
  0x04,
  0xfe,
  0x5f,
  0x89,
  0xb6,
  0xfe,
  0x5e,
  0xbd,
  0x27,
  0x4e,
  0x38,
  0x76,
  0x6f,
  0x5b,
  0x77,
  0xcf,
  0x7c,
  0x3d,
  0x8c,
  0xba,
  0xf2,
  0xc3,
  0x39,
  0x30,
  0x56,
  0x3e,
  0xde,
  0x1b,
  0xe1,
  0x61,
  0xb3,
  0xce,
  0x4e,
  0x1f,
  0x3f,
  0x42,
  0xa5,
  0xd0,
  0x1a,
  0x96,
  0xc8,
  0x51,
  0x83,
  0xe4,
  0x2c,
  0x39,
  0x24,
  0x49,
  0x68,
  0xa9,
  0xa5,
  0x9c,
  0xd3,
  0xd0,
  0x63,
  0x31,
  0x15,
  0xe8,
  0x35,
  0x2a,
  0xab,
  0x00,
  0xdc,
  0x06,
  0x49,
  0x40,
  0xa1,
  0xa1,
  0x62,
  0x49,
  0x53,
  0x8d,
  0xd7,
  0x5c,
  0x78,
  0x68,
  0xab,
  0x0a,
  0xcb,
  0xd3,
  0x74,
  0xa8,
  0xf1,
  0xc4,
  0x64,
  0x28,
  0x9a,
  0x98,
  0xa3,
  0x67,
  0x6a,
  0xf6,
  0x50,
  0x7d,
  0xde,
  0x01,
  0xee,
  0xdc,
  0x15,
  0x35,
  0xe5,
  0x0b,
  0x3d,
  0xf7,
  0xfd,
  0xba,
  0xee,
  0x82,
  0xdb,
  0x0e,
  0x59,
  0x0d,
  0xd3,
  0x87,
  0x4c,
  0xd9,
  0x39,
  0xb3,
  0x6e,
  0x95,
  0x8b,
  0xfd,
  0x1a,
  0x98,
  0x51,
  0xfd,
  0x19,
  0x7d,
  0x9a,
  0x65,
  0xcb,
  0x5c,
  0xae,
  0x57,
  0x7c,
  0xd7,
  0xf5,
  0x0a,
  0xaa,
  0xf5,
  0xae,
  0x3f,
  0x0e,
  0xa2,
  0xe4,
  0xce,
  0xdf,
  0xa8,
  0xd4,
  0xa3,
  0xc6,
  0x14,
  0x3b,
  0xf7,
  0x75,
  0xee,
  0xdc,
  0x0c,
  0x3b,
  0xcb,
  0x18,
  0xf1,
  0x80,
  0x0b,
  0xff,
  0x14,
  0x52,
  0xd2,
  0xe6,
  0xa3,
  0xb4,
  0x3a,
  0xa7,
  0x6f,
  0x7f,
  0xf7,
  0x52,
  0x18,
  0x35,
  0xf6,
  0x00,
  0x00,
  0x4f,
  0xa8,
  0x6c,
  0xb0,
  0xe4,
  0xa1,
  0x42,
  0x29,
  0x62,
  0x18,
  0x7b,
  0x92,
  0x7d,
  0x9a,
  0xfe,
  0xea,
  0xdf,
  0x6c,
  0xf1,
  0xb5,
  0x8a,
  0xcb,
  0x12,
  0x49,
  0xf7,
  0xb3,
  0x98,
  0x75,
  0x85,
  0x6e,
  0xd6,
  0x6c,
  0x16,
  0x18,
  0xac,
  0xe7,
  0x4e,
  0xd9,
  0xb5,
  0xa2,
  0xae,
  0x26,
  0x5b,
  0xf2,
  0xe6,
  0x2e,
  0x5f,
  0xcf,
  0xbf,
  0xdd,
  0xd4,
  0x35,
  0x56,
  0x88,
  0xad,
  0xc4,
  0x68,
  0x05,
  0x68,
  0x48,
  0x44,
  0x87,
  0x2f,
  0xdc,
  0xe7,
  0x0f,
  0x54,
  0x04,
  0xea,
  0x3d,
  0x5d,
  0x9b,
  0x95,
  0x60,
  0x61,
  0xa0,
  0xa0,
  0x80,
  0x41,
  0x03,
  0xd5,
  0x8b,
  0xbe,
  0x46,
  0x51,
  0x7f,
  0xfb,
  0x6a,
  0x19,
  0xf2,
  0x46,
  0xe0,
  0x4c,
  0xda,
  0x58,
  0x70,
  0x62,
  0xaa,
  0xc9,
  0x92,
  0xf8,
  0x90,
  0xcb,
  0x80,
  0x2a,
  0xe7,
  0xc4,
  0x1d,
  0xe0,
  0xc0,
  0xcb,
  0xd9,
  0x12,
  0x31,
  0x61,
  0x48,
  0x73,
  0xa6,
  0xe6,
  0xfc,
  0x56,
  0x0c,
  0x33,
  0xca,
  0xa2,
  0xc7,
  0xfd,
  0xe0,
  0xc0,
  0xcb,
  0xa8,
  0x06,
  0x8e,
  0xab,
  0x93,
  0x91,
  0x81,
  0x82,
  0x87,
  0x1e,
  0x22,
  0x65,
  0x46,
  0x1a,
  0x96,
  0xe9,
  0x01,
  0x02,
  0x68,
  0xa5,
  0x28,
  0xb4,
  0x9a,
  0xf5,
  0xf1,
  0xdb,
  0x81,
  0xf1,
  0x81,
  0x3b,
  0x0c,
  0x1a,
  0x58,
  0xf9,
  0x31,
  0x0f,
  0x11,
  0xc5,
  0x08,
  0x73,
  0x64,
  0x4a,
  0x16,
  0xae,
  0xde,
  0x3e,
  0xdf,
  0x3c,
  0xdb,
  0x15,
  0x89,
  0x71,
  0x60,
  0x23,
  0xc4,
  0xeb,
  0x35,
  0xe8,
  0x33,
  0xe4,
  0x4a,
  0x16,
  0x8f,
  0x9c,
  0x9b,
  0x95,
  0x89,
  0x71,
  0x41,
  0x00,
  0x82,
  0x67,
  0x4c,
  0x1a,
  0xb6,
  0xee,
  0x5e,
  0x10,
  0xd6,
  0x48,
  0x72,
  };


  Serial.print("SROM download started.");
  Serial.println();
  writeRegister(CONFIG5, 0x04);
  delayMicroseconds(180);
  writeRegister(SROM_ENABLE, 0x1D);
  delay(10);
  writeRegister(SROM_ENABLE, 0x18);
  
  delayMicroseconds(180);
  uint8_t adress = SROM_LOAD_BURST | WRITE;
  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  digitalWrite(chipSelect, LOW);
  // SPI transfert burst to chip -- so not using write register to keep NSC pin LOW
  delayMicroseconds(1);
  SPI.transfer(adress);
  // SPI.transfer(SROM_BYTES, 4094);
  for (int i=0; i<sizeof(SROM_BYTES); i++) {
    delayMicroseconds(15);
    SPI.transfer(SROM_BYTES[i]);
  }

  delayMicroseconds(15);
  digitalWrite(chipSelect, HIGH);
  delayMicroseconds(1);
  SPI.endTransaction();
  delay(50);
  writeRegister(CONFIG3, 0x01);
  delay(1);


  writeRegister(SROM_ENABLE, 0x15);
  delay(100);
  uint16_t upperByte = readRegister(DATA_OUT_U, 1);
  delayMicroseconds(20);
  uint16_t lowerByte = readRegister(DATA_OUT_L, 1);
  uint16_t crcValue = (upperByte << 8) | lowerByte;
  if(crcValue == 0xBEEF){
    Serial.print("SROM dowloaded successfully!");
  Serial.println();
  } 
  else{
    Serial.print("An error occured during SROM downloading.");
    Serial.println();
  }

  Serial.print("CRC value: ");
  Serial.println(crcValue, HEX);

  delayMicroseconds(20);
  writeRegister(0x23, 0x01);

  // delayMicroseconds(200);
  // uint8_t srom_ID = readRegister(0x29, 1);
  // Serial.print("SROM_ID: ");
  // Serial.println(srom_ID, DEC);
}


void writeRegister(uint8_t thisRegister, uint8_t thisValue) {

  uint8_t dataToSend = thisRegister | WRITE;

  // take the chip select low to select the device:

  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  
  digitalWrite(chipSelect, LOW);
  delayMicroseconds(1);

  SPI.transfer(dataToSend); //Send register location

  SPI.transfer(thisValue);
  
  // take the chip select high to de-select:
  delayMicroseconds(35);
  digitalWrite(chipSelect, HIGH);
  SPI.endTransaction();
}

uint8_t readRegister(uint8_t thisRegister, int bytesToRead) {

  uint8_t inByte = 0;           // incoming byte from the SPI

  unsigned int result = 0;   // result to return

  // Serial.print(thisRegister, BIN);

  // Serial.print("\t");

  uint8_t dataToSend = thisRegister & READ;

  // Serial.println(thisRegister, BIN);

  // take the chip select low to select the device:
  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  digitalWrite(chipSelect, LOW);
  delayMicroseconds(1);
  // send the device the register you want to read:

  SPI.transfer(dataToSend);

  // send a value of 0 to read the first byte returned:
  delayMicroseconds(160);

  result = SPI.transfer(0x00);

  // decrement the number of bytes left to read:


  // bytesToRead--;

  // if you still have another byte to read:

  // if (bytesToRead > 0) {

  //   // shift the first byte left, then get the second byte:

  //   result = result << 8;

  //   inByte = SPI.transfer(0x00);

  //   // combine the byte you just got with the previous one:

  //   result = result | inByte;

  //   // decrement the number of bytes left to read:

  //   bytesToRead--;

  // }

  // take the chip select high to de-select:
  delayMicroseconds(1);
  digitalWrite(chipSelect, HIGH);
  SPI.endTransaction();
  // return the result:
  return result;
}
void testerFunction(){

  /*
    Function to test CRC value. If the return value is 0xBEEF, the SPI link is functional and the SROM dowload is successfull.
  */

  if(Serial.available()){
    String incomingByte = Serial.readStringUntil('\n');
    if (incomingByte.equals("crctest")){
      writeRegister(SROM_ENABLE, 0x15);
      delay(100);
      uint16_t upperByte = readRegister(DATA_OUT_U, 1);
      delayMicroseconds(20);
      uint16_t lowerByte = readRegister(DATA_OUT_L, 1);
      uint16_t crcValue = (upperByte << 8) | lowerByte;

      Serial.print("CRC value: ");
      Serial.println(crcValue, HEX);

      delayMicroseconds(20);
      writeRegister(0x23, 0x01);
    }
    if (incomingByte.equals("readmotion")){

      // uint8_t dummy = readRegister(0x02, 1);
      // uint16_t deltaX = readDeltaX();
      // uint16_t deltaY = readDeltaY();
      Serial.print("Motion registers cleared");
      Serial.println();
    }
    if (incomingByte.equals("commands")){
      Serial.print("crctest: check CRC value. Should be BEEF if SROM is valid");
      Serial.println();
      Serial.print("readmotion: Read the motion register (0x02) to clear the motion pin.");
      Serial.println();
    }
    else{
      Serial.print("Bad command, write 'commands' to see your options");
      Serial.println();
    }
  }
}

void motionBurstSetUp(){
  writeRegister(CONFIG2, 0x18); //Write 0x18 to config2
  writeRegister(MOTION_BURST, 0x00); //Write anything to Motion_Burst register

  uint8_t inByte = 0;           // incoming byte from the SPI

  int bytesToRead = 15;

  uint8_t dataToSend = MOTION_BURST & READ;

  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  digitalWrite(chipSelect, LOW);
  delayMicroseconds(1);
  // send the device the register you want to read:

  SPI.transfer(dataToSend);

  delayMicroseconds(35);

  for(int i = 0; i < 15; i++){
    dataBurstMotion[i] = SPI.transfer(0x00);
  }

  // result = SPI.transfer(0x00);

  // bytesToRead--;

  // // if you still have another byte to read:

  // while (bytesToRead > 0) {

  //   // shift the first byte left, then get the second byte:

  //   result = result << 8;

  //   inByte = SPI.transfer(0x00);

  //   // combine the byte you just got with the previous one:

  //   result = result | inByte;

  //   // decrement the number of bytes left to read:

  //   bytesToRead--;

  // }
  delayMicroseconds(1);
  digitalWrite(chipSelect, HIGH);
  delayMicroseconds(1);
  SPI.endTransaction();
  // return the result:
  Serial.print("Burst motion bit input: ");
  for(int i = 0; i<sizeof(dataBurstMotion); i++){
    Serial.println(dataBurstMotion[i], BIN);
  }

  uint8_t CRC = 0x00;
  for (int i = 0; i < 14; i++)
    {
      CRC ^= dataBurstMotion[i];
      if (CRC & 0x80) 
        CRC = (CRC << 1) ^ 0xD5;
      else 
        CRC <<= 1;
    }
  Serial.print("CRC: ");
  Serial.println(dataBurstMotion[14]);
  Serial.print("CRC test: ");
  Serial.println(CRC);
  // return result;
}

void motionBurstRead(int bytesToRead){
  
  delay(1);
  
  writeRegister(0x50, 0x00);
  
  uint8_t inByte = 0;           // incoming byte from the SPI

  uint8_t dataToSend = MOTION_BURST & READ;

  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  digitalWrite(chipSelect, LOW);
  delayMicroseconds(1);
  // send the device the register you want to read:

  SPI.transfer(dataToSend);

  delayMicroseconds(35);

  for(int i = 0; i < bytesToRead; i++){
    dataBurstMotion[i] = SPI.transfer(0x00);
  }

  delayMicroseconds(1);
  digitalWrite(chipSelect, HIGH);
  delayMicroseconds(1);
  SPI.endTransaction();



}

void setPositionZero(){
  if(Serial.available()){
    String incomingByte = Serial.readStringUntil('\n');
    if (incomingByte.equals("zero")){
      position_X = 0;
      position_Y = 0;
    }
  }
}

void printDelta_XY(){
  if(Serial.available()){
    String incomingByte = Serial.readStringUntil('\n');
    if (incomingByte.equals("xy")){
      Serial.print(" ");
      Serial.print(position_X);
      Serial.print(" ");
      Serial.println(position_Y);
    }
  }
}

void frameCaptureInit(){
  writeRegister(PWR_UP_RST, 0x5A);
  delay(5);
  writeRegister(0x1E, 0x08);
  writeRegister(0x20, 0x84);
  writeRegister(0x1F, 0x03);
  writeRegister(CONFIG3, 0x01);
  delay(35);
}

void getFrame(){
  writeRegister(FRAME_CAPTURE, 0x93);
  writeRegister(FRAME_CAPTURE, 0xC5);
  delay(20);

  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
  digitalWrite(chipSelect, LOW);
  delayMicroseconds(1);
  // send the device the register you want to read:

  SPI.transfer(RAWDATA_BURST);

  delayMicroseconds(160);

  for(int i = 0; i < 1024; i++){
    frameArray[i] = SPI.transfer(0x00);
    delayMicroseconds(200);
  }

  delayMicroseconds(1);
  digitalWrite(chipSelect, HIGH);
  delayMicroseconds(1);
  SPI.endTransaction();
}

void sendFrame(){
  Serial.write(frameArray, sizeof(frameArray));
}

void getSerialInput(){
  if(Serial.available() > 0){
    char receivedCommand = Serial.read();
    switch (receivedCommand){

      case 'Z':
        position_X = 0;
        position_Y = 0;

        break;
      
      case 'D':
        Serial.print(dist_X);
        Serial.print(", ");
        Serial.println(dist_Y);

        break;
      
      case 'S':
        Serial.println(squal_avg);

        break;

      case 'F':
        if(firstFrame == true){
          frameCaptureInit();
          firstFrame = false;
        
        getFrame();
        sendFrame();

        break;

        }

    }
  }
}


